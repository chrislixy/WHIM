\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}


Original Function and generating boxes

<<>>=

library(lmmoptim)
rejection=function(boxes,lines,n){
  # initial setting
  sample=matrix(NA,nrow=0,ncol=3)
  # draw box indices
  area = (boxes[,2]-boxes[,1])*(boxes[,4]-boxes[,3])
  prob = exp(boxes[,6]-min(boxes[,6]))
  
  N = 1.5*n
  
  while (N>0) {
    # for remaining samples
    boxindex = sample(seq(1:dim(boxes)[1]),N,replace=T,prob = area * prob)
    
    # calculate sample frequency for each index
    indexfreq=data.frame(table(boxindex))
    indexfreq$boxindex=as.numeric(levels(indexfreq$boxindex))[indexfreq$boxindex]
    for (j in 1:dim(indexfreq)[1]){
      # sample uniformly from the box
      sigmas=with(boxes,
                  runif(n=indexfreq[j,2],min=sigsqs.lo[indexfreq[j,1]],max=sigsqs.hi[indexfreq[j,1]]))
      sigmae=with(boxes,
                  runif(n=indexfreq[j,2],min=sigsqe.lo[indexfreq[j,1]],max=sigsqe.hi[indexfreq[j,1]]))
      eval.sigma=NULL
      for (i in 1:length(sigmas)){
        sigma = with(lines, a*sigmas[i]+b*sigmae[i])
        eval.sigma[i] = with(lines, sum(- 0.5*(multiplier.log * log(sigma) + multiplier.inv/sigma)))
      }
      acceptprob=exp(eval.sigma-boxes[indexfreq[j,1],6])
      
      # accept if alpha > u
      u=runif(n=length(sigmas))
      sample=rbind(sample,matrix(c(sigmas[acceptprob>u],sigmae[acceptprob>u],acceptprob[acceptprob>u]),ncol=3))
      
    }  
    # calculate remaining sample size
    N=n-dim(sample)[1]
    
  }
  output=as.data.frame(sample)
  colnames(output)= c("sigmas","sigmae","acceptance")
  return(output[1:n,])
}

HMO <- read.csv("~/Documents/2016 Spring Semester/RandomEffects/HMO.csv")
HMO_states <- read.csv("~/Documents/2016 Spring Semester/RandomEffects/HMO_states.csv")
hmobig=merge(x = HMO, y = HMO_states, by = "state", all.x = TRUE)

y <- hmobig$indPrem
n <- length(y)
mod <- lm(indPrem ~ expPerAdm + (region == "NE") + state, data = hmobig, x = TRUE)
x <- mod$x[, 1:3]
z <- mod$x[, -(1:3), drop = FALSE]
SigE <- diag(n)
SigS <- diag(44)

linesA <- findlines(x, z, y, SigE, SigS)
mlreboxA <- with(linesA,
                 makebox(lims.sigsqs = c(0, max(int.sigsqs[is.finite(int.sigsqs)])),
                         lims.sigsqe = c(0, max(int.sigsqe[is.finite(int.sigsqe)])),
                         status = rep("straddle", nrow(linesA)),
                         lines = linesA))
boxes.HH11 <- findf(lines = linesA, mlreboxA, eps = 0.5, delE = 0, 
                     delS = 0, ratio = TRUE, M = 20, maxit = 25)

boxes=boxes.HH11
lines=linesA
n=50000


@


<<>>=
set.seed(1)
test=rejection(boxes,lines,n)

library(hexbin)
bin = hexbin(test$sigmas~ test$sigmae, xbins=50) 
plot(bin, main="Sample Frequency", xlab = expression(sigma[e]^2) , ylab = expression(sigma[s]^2))
@


What if ... accept all samples
<<>>=

set.seed(1)
  # initial setting
  sample=matrix(NA,nrow=0,ncol=3)
  # draw box indices
  area = (boxes[,2]-boxes[,1])*(boxes[,4]-boxes[,3])
  prob = exp(boxes[,6]-min(boxes[,6]))
  
  N = n
  

    # for remaining samples
    boxindex = sample(seq(1:dim(boxes)[1]),N,replace=T,prob = area * prob)
    
    # calculate sample frequency for each index
    indexfreq=data.frame(table(boxindex))
    indexfreq$boxindex=as.numeric(levels(indexfreq$boxindex))[indexfreq$boxindex]
    for (j in 1:dim(indexfreq)[1]){
      # sample uniformly from the box
      sigmas=with(boxes,
                  runif(n=indexfreq[j,2],min=sigsqs.lo[indexfreq[j,1]],max=sigsqs.hi[indexfreq[j,1]]))
      sigmae=with(boxes,
                  runif(n=indexfreq[j,2],min=sigsqe.lo[indexfreq[j,1]],max=sigsqe.hi[indexfreq[j,1]]))
      eval.sigma=NULL
      for (i in 1:length(sigmas)){
        sigma = with(lines, a*sigmas[i]+b*sigmae[i])
        eval.sigma[i] = with(lines, sum(- 0.5*(multiplier.log * log(sigma) + multiplier.inv/sigma)))
      }
      acceptprob=exp(eval.sigma-boxes[indexfreq[j,1],6])
      
    
      sample=rbind(sample,matrix(c(sigmas,sigmae,acceptprob),ncol=3))
      
    }  
  sample=as.data.frame(sample)
  colnames(sample)= c("sigmas","sigmae","acceptance")

bin = hexbin(sample$sigmas~ sample$sigmae, xbins=50) 
plot(bin, main="Sample Frequency", xlab = expression(sigma[e]^2) , ylab = expression(sigma[s]^2))
hist(sample$acceptance)
@


\end{document}